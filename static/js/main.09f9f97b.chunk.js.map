{"version":3,"sources":["BaseContext.js","Components/Theme/index.js","Components/Home/index.js","Components/Contact/index.js","Components/Sacrifice/index.js","App.js","serviceWorker.js","index.js"],"names":["React","createContext","undefined","DarkTheme","createMuiTheme","palette","type","background","default","primary","main","blue","secondary","grey","overrides","MuiPaper","root","backgroundColor","MuiContainer","paddingTop","paddingBottom","Home","Typography","variant","Component","withStyles","theme","withTheme","Contact","Comp","props","handleChange","name","event","update","target","value","setState","state","input","output","classes","this","Container","maxWidth","Paper","className","paper","Grid","container","spacing","item","xs","TextField","autoFocus","onChange","label","fullWidth","multiline","DialogActions","Tooltip","title","IconButton","aria-label","disabled","onClick","onClickClear","bind","onClickCopy","Button","onClickRender","sacrifice","content","navigator","clipboard","writeText","text","ch","i","cap","op","length","charAt","includes","toUpperCase","toLowerCase","padding","App","Fragment","CssBaseline","BaseContext","Provider","exact","path","component","Sacrifice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09f9f97b.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default React.createContext(undefined);\n","import {createMuiTheme} from \"@material-ui/core\";\nimport {grey, blue} from \"@material-ui/core/colors\";\n\nconst paperColor = \"rgba(30,30,30)\";\n\nconst DarkTheme = createMuiTheme({\n    palette: {\n        type: \"dark\",\n        background: {\n            default: \"#121212\"\n        },\n        primary: {\n            main: blue[500]\n        },\n        secondary: {\n            main: grey[500]\n        },\n    },\n    overrides: {\n        MuiPaper: {\n            root: {\n                backgroundColor: paperColor,\n            }\n        },\n        MuiContainer: {\n            root: {\n                paddingTop: \"16px\",\n                paddingBottom: \"16px\",\n            }\n        }\n    }\n});\n\nexport {DarkTheme};\n","import React from \"react\";\nimport {withStyles} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = theme => ({});\n\nclass Home extends React.Component {\n    render() {\n        return (\n            <div>\n                <Typography variant={\"h1\"}>\n                    Hi.\n                </Typography>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles, {withTheme: true})(Home);","import React from \"react\";\nimport {withStyles} from \"@material-ui/core\";\n\nconst styles = theme => ({});\n\nclass Contact extends React.Component {\n    render() {\n        return (\n            <div>\n                Contact.\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles, {withTheme: true})(Contact);","import React from \"react\";\nimport {withStyles} from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ClearAllIcon from '@material-ui/icons/ClearAll';\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\n\nconst styles = theme => ({\n    paper: {\n        padding: theme.spacing(2),\n    }\n});\n\nclass Comp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: \"\",\n            output: \"\",\n        };\n    }\n\n    render() {\n        const {classes} = this.props;\n        const {output, input} = this.state;\n        return (\n            <Container maxWidth={\"md\"}>\n                <Paper className={classes.paper}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                autoFocus\n                                value={input}\n                                onChange={this.handleChange(\"input\")}\n                                label={\"Your text\"}\n                                variant={\"outlined\"}\n                                fullWidth\n                                multiline\n                            />\n                        </Grid>\n                        {\n                            output ?\n                                <Grid item xs={12}>\n                                    <TextField\n                                        value={output}\n                                        onChange={this.handleChange(\"output\")}\n                                        variant={\"outlined\"}\n                                        fullWidth\n                                        multiline\n                                    />\n                                </Grid>\n                                : null\n                        }\n                        <Grid item xs={12}>\n                            <DialogActions>\n                                <Tooltip title={\"Clear\"}>\n                                    <span>\n                                        <IconButton\n                                            aria-label=\"clear\"\n                                            disabled={!(output || input)}\n                                            onClick={this.onClickClear.bind(this)}\n                                        >\n                                            <ClearAllIcon/>\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                                {\n                                    output ?\n                                        <Tooltip title={\"Copy\"}>\n                                            <IconButton\n                                                aria-label=\"copy\"\n                                                onClick={this.onClickCopy.bind(this)}\n                                            >\n                                                <FileCopyIcon/>\n                                            </IconButton>\n                                        </Tooltip>\n                                        : null\n                                }\n\n                                <Button\n                                    onClick={this.onClickRender.bind(this)}\n                                    variant={\"outlined\"}\n                                    disabled={!input}\n                                >\n                                    Render\n                                </Button>\n                            </DialogActions>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </Container>\n        );\n    }\n\n    onClickRender() {\n        this.setState({output: sacrifice(this.state.input)});\n    }\n\n    onClickClear() {\n        this.setState({output: \"\", input: \"\"});\n    }\n\n    onClickCopy() {\n        copyToClipBoard(this.state.output);\n    }\n\n    handleChange = name => event => {\n        const update = {[name]: event.target.value};\n        this.setState(update);\n    };\n}\n\nfunction sacrifice(text) {\n    let cap = true, op = \"\", ch, i;\n    let letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    for (i = 0; i < text.length; ++i) {\n        ch = text.charAt(i);\n        if (letters.includes(ch)) {\n            if (cap) {\n                ch = ch.toUpperCase();\n            } else {\n                ch = ch.toLowerCase();\n            }\n            cap = !cap;\n        }\n        op += ch;\n    }\n    return op;\n}\n\nfunction copyToClipBoard(content) {\n    navigator.clipboard.writeText(content);\n}\n\nexport default withStyles(styles, {withTheme: true})(Comp);","import React from \"react\";\nimport {withStyles} from \"@material-ui/core\";\nimport {MuiThemeProvider} from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport BaseContext from \"./BaseContext\";\nimport {DarkTheme} from \"./Components/Theme\";\nimport {Route, BrowserRouter as Router, Switch} from \"react-router-dom\";\nimport Home from \"./Components/Home\";\nimport Contact from \"./Components/Contact\";\nimport Sacrifice from \"./Components/Sacrifice\";\n\nconst styles = theme => ({});\n\n\nclass App extends React.Component {\n    render() {\n        return (\n            <MuiThemeProvider theme={DarkTheme}>\n                <React.Fragment>\n                    <CssBaseline/>\n                    <BaseContext.Provider>\n                        <Router>\n                            <div>\n                                <Switch>\n                                    <Route exact path=\"/\" component={Home}/>\n                                    <Route path=\"/contact\" component={Contact}/>\n                                    <Route path=\"/sacrifice\" component={Sacrifice}/>\n                                </Switch>\n                            </div>\n                        </Router>\n                    </BaseContext.Provider>\n                </React.Fragment>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default withStyles(styles, {withTheme: true})(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}